@typeparam TItem
@using BandBookerWasm.Shared

<div class="row">
	<div class="card-group col-12">
		<div class="card col-5">
			<div class="card-body">
				<div class="card-title"><h5>All @ItemTypePlural</h5></div>
				<DxListBox @ref="allGrid" @key="@allKey" Data="@RemainingItems" CssClass="dxobjectpicker" 
						   TextFieldName="@TextPropertyName" 
						    SelectionMode="ListBoxSelectionMode.Multiple"
							ShowCheckboxes="true"
						    @bind-SelectedItems="@RemainingSelection">
				</DxListBox>
			</div>
		</div>
	
		<div class="card col-2">
			<div class="btn-group-vertical align-middle">
				<DxButton RenderStyle="ButtonRenderStyle.Primary" Click="@AddSelectionClick"
						  Enabled="@AddSelectedEnabled" Text="&gt;" />
				<DxButton RenderStyle="ButtonRenderStyle.Primary" Click="@AddAllClick"
						  Enabled="@AddAllEnabled" Text="&gt;&gt;" />
				<DxButton RenderStyle="ButtonRenderStyle.Primary" Click="@RemoveSelectionClick"
						  Enabled="@RemoveSelectedEnabled" Text="&lt;" />
				<DxButton RenderStyle="ButtonRenderStyle.Primary" Click="@RemoveAllClick"
						  Enabled="@RemoveAllEnabled" Text="&lt;&lt;" />				
			</div>
		</div>
		<div class="card col-5">
			<div class="card-body">
				<div class="card-title"><h5>Selected @ItemTypePlural</h5></div>
				<DxListBox @ref="selGrid" @key="@selKey" Data="@SelectedItems" CssClass="dxobjectpicker" 
						   TextFieldName="@TextPropertyName"
						    SelectionMode="ListBoxSelectionMode.Multiple"
							ShowCheckboxes="true"
							@bind-SelectedItems="@SelectedSelection">
				</DxListBox>				
			</div>
		</div>
	</div>
</div>

@code {

		DxListBox<TItem> allGrid; Guid allKey = Guid.NewGuid();
		DxListBox<TItem> selGrid; Guid selKey = Guid.NewGuid();

		bool AddSelectedEnabled { get => RemainingItems.Any() && RemainingSelection != null && RemainingSelection.Any(); }
		bool RemoveSelectedEnabled { get => SelectedItems.Any() && SelectedSelection != null && SelectedSelection.Any(); }
		bool AddAllEnabled { get => RemainingItems.Any(); }
		bool RemoveAllEnabled { get => SelectedItems.Any(); }

		void UpdateCtrls()
		{
			allKey = Guid.NewGuid();
			selKey = Guid.NewGuid();
		}

	public string SelectedItemTypePlural { get => $"Selected {ItemTypePlural}"; }
	public string AllItemTypePlural { get => $"All {ItemTypePlural}"; }

	[Parameter]
	public string ItemType { get; set; }

	[Parameter]
	public string ItemTypePlural { get; set; }

	[Parameter]
	public string TextPropertyName { get; set; }

	[Parameter]
	public List<TItem> AllItems { get; set; }

	[Parameter]
	public List<TItem> SelectedItems { get; set; } = new List<TItem>();


	protected override void OnParametersSet()
	{
		AutoSelectFirstOnes();
	}

	public List<TItem> RemainingItems
	{
		get => AllItems.Where(x => !SelectedItems.Contains(x)).ToList();
		set { var dummy = value; }
	}

	private IEnumerable<TItem> _RemainingSelection = new TItem[] { };
	public IEnumerable<TItem> RemainingSelection {
		get=>_RemainingSelection;
		set { _RemainingSelection = value; InvokeAsync(StateHasChanged); }
	}

	private IEnumerable<TItem> _SelectedSelection = new TItem[] { };
	public IEnumerable<TItem> SelectedSelection {
		get=>_SelectedSelection;
		set { _SelectedSelection = value; InvokeAsync(StateHasChanged); }
	}


	void AutoSelectFirstOnes()
	{
		if (RemainingItems.Count() > 0)
		{
			RemainingSelection = RemainingItems.Take(1).ToList();
		}
		else if (SelectedItems.Count() > 0)
		{
			SelectedSelection = SelectedItems.Take(1).ToList();
		}
	}

	void AddSelectionClick(MouseEventArgs args)
	{
		if (RemainingSelection?.Count() > 0)
		{
			SelectedItems.AddRange(RemainingSelection);
			AutoSelectFirstOnes();
			UpdateCtrls();
		}
	}

	void AddAllClick(MouseEventArgs args)
	{
		SelectedItems.AddRange(RemainingItems);
		AutoSelectFirstOnes();
		UpdateCtrls();

	}

	void RemoveSelectionClick(MouseEventArgs args)
	{
		if (SelectedSelection?.Count() > 0)
		{
			SelectedItems = SelectedItems.Where(x => !SelectedSelection.Contains(x)).ToList();
			AutoSelectFirstOnes();
			UpdateCtrls();
		}
	}

	void RemoveAllClick(MouseEventArgs args)
	{
		SelectedItems.Clear();
		AutoSelectFirstOnes();
		UpdateCtrls();

	}
}
